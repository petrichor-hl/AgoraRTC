@page "/groupCall/{roomId}/{peerName}/{peerAvatar}/{typeCall}/{receiverName?}/{receiverAvt?}"

<link rel="stylesheet" type="text/css" href="css/group_call.css" />

@if (peersInRoom.Count == 0)
{
    <div class="container">

    @if (status == "Cuộc gọi đã kết thúc")
        {
            <div style="height: 100%; padding: 2%;">
                <img src="assets/image/call_banner.jpeg" class="ending-call-banner" />
            </div>
        }
        else
        {
            @if (receiverAvt != null)
            {
                <img src="@receiverAvt" class="avatar-200 mb-3" />
            }

            @if (receiverName != null)
            {
                <p class="mud-typography-h3" style="color: rgba(89,74,226,1); margin-bottom: 4px">
                    @receiverName
                </p>
            }
            <p class="mud-typography-h5">@status</p>
        }

    </div>

}
else
{
    <div class="grid-container px-5 pt-5">
        @foreach (var peer in peersInRoom)
            {
                <div id="peer-@peer.Key" class="grid-item relative">
                    <div id="peerInfo-@peer.Key" class="d-flex flex-column justify-center align-center absolute avatar-card">
                        <img src="@("https://image.tmdb.org/t/p/w440_and_h660_face/" + peer.Value.AvatarUrl)"
                            class="avatar-150 mb-4" />
                        <p class="mud-typography-h3" style="color: rgba(89,74,226,1); text-align: center">
                            @peer.Value.Name
                        </p>
                    </div>
                </div>
            }
    </div>
}

@if (status == "Đang gọi ...") {
    <p id="count-down">
        Kết thúc sau @countdownSeconds giây
    </p>
}



<div id="my-frame">
    @if (isProcessing) 
    {
        <div class="d-flex justify-center align-center avatar-card">
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        </div>
    } else 
    {
        <div class="d-flex flex-column justify-center align-center absolute avatar-card"
            style="@(isVideoOn ? "z-index: -1" : "z-index: 1")">

            <img src="@("https://image.tmdb.org/t/p/w440_and_h660_face/" + peerAvatar)" class="avatar-100 mb-4" />
            <p class="mud-typography-h3" style="color: rgba(89,74,226,1); text-align: center">
                @peerName
            </p>
        </div>
    }

</div>

@if (isProcessing == false) {
    <div id="controls">
    @if (status == "Đang gọi ..." || status == "Đã kết nối")
    {
        <button id="mic-btn" class="button-27" role="button" style="background-color: rgba(30,200,165,1)"
            @onclick="ToggleMic">
            @if (isMicOn)
            {
                <svg xmlns="http://www.w3.org/2000/svg" height="32" width="32"
                    viewBox="0 0 384 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                    <path fill="#ffffff"
                        d="M192 0C139 0 96 43 96 96V256c0 53 43 96 96 96s96-43 96-96V96c0-53-43-96-96-96zM64 216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 89.1 66.2 162.7 152 174.4V464H120c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H216V430.4c85.8-11.7 152-85.3 152-174.4V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 70.7-57.3 128-128 128s-128-57.3-128-128V216z" />
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" height="32" width="32"
                    viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                    <path fill="#ffffff"
                        d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L472.1 344.7c15.2-26 23.9-56.3 23.9-88.7V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 21.2-5.1 41.1-14.2 58.7L416 300.8V96c0-53-43-96-96-96s-96 43-96 96v54.3L38.8 5.1zm362.5 407l-43.1-33.9C346.1 382 333.3 384 320 384c-70.7 0-128-57.3-128-128v-8.7L144.7 210c-.5 1.9-.7 3.9-.7 6v40c0 89.1 66.2 162.7 152 174.4V464H248c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H344V430.4c20.4-2.8 39.7-9.1 57.3-18.2z" />
                </svg>
            }

        </button>

        <button id="call-end-btn" class="button-27" role="button"
            style="background-color: rgba(244,67,54,1); margin-inline: 20px" @onclick="CallEnd">
            <svg xmlns="http:www.w3.org/2000/svg" height="32" width="32"
                viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https:fontawesome.com License - https:fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                <path fill="#ffffff"
                    d="M601.2 5.1c10.4-8.2 25.5-6.3 33.7 4.1s6.3 25.5-4.1 33.7l-592 464c-10.4 8.2-25.5 6.3-33.7-4.1s-6.3-25.5 4.1-33.7l155.6-122C101.8 270 64 171.4 64 64c0-18 12.1-33.8 29.5-38.6l88-24c19.4-5.3 39.7 4.6 47.4 23.2l40 96c6.8 16.3 2.1 35.2-11.6 46.3L208 207.3c12 25.5 27.2 49.2 45 70.7L601.2 5.1zM234.3 415.6l91.3-72c13.7 9.1 28 17.3 43 24.3L409 318.7c11.2-13.7 30-18.4 46.3-11.6l96 40c18.6 7.7 28.5 28 23.2 47.4l-24 88C545.8 499.9 530 512 512 512c-104.9 0-201.3-36-277.7-96.4z" />
            </svg>

        </button>

        <button id="video-btn" class="button-27" role="button" style="background-color: rgba(89,74,226,1)"
        @onclick="ToggleVideo">
        @if (isVideoOn)
            {
                <svg xmlns="http:www.w3.org/2000/svg" height="32" width="32"
                    viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https:fontawesome.com License - https:fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                    <path fill="#ffffff"
                        d="M0 128C0 92.7 28.7 64 64 64H320c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128zM559.1 99.8c10.4 5.6 16.9 16.4 16.9 28.2V384c0 11.8-6.5 22.6-16.9 28.2s-23 5-32.9-1.6l-96-64L416 337.1V320 192 174.9l14.2-9.5 96-64c9.8-6.5 22.4-7.2 32.9-1.6z" />
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" height="32" width="32"
                    viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                    <path fill="#ffffff"
                        d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-86.4-67.7 13.8 9.2c9.8 6.5 22.4 7.2 32.9 1.6s16.9-16.4 16.9-28.2V128c0-11.8-6.5-22.6-16.9-28.2s-23-5-32.9 1.6l-96 64L448 174.9V192 320v5.8l-32-25.1V128c0-35.3-28.7-64-64-64H113.9L38.8 5.1zM407 416.7L32.3 121.5c-.2 2.1-.3 4.3-.3 6.5V384c0 35.3 28.7 64 64 64H352c23.4 0 43.9-12.6 55-31.3z" />
                </svg>
            }

        </button>

    }
    else
    {
        <button role="button" class="button-27 rounded-circle pa-3" style="background-color: rgba(150,150,150,1)"
            onclick="window.close()">
            <svg xmlns="http://www.w3.org/2000/svg" height="32" width="32"
                viewBox="0 0 384 512"><!--!Font Awesome Free 6.5.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.-->
                <path fill="#ffffff"
                    d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
            </svg>
        </button>
    }

</div>
}

@using Microsoft.AspNetCore.SignalR.Client;
@using AgoraRTC.Models

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

@implements IDisposable

@code {

    public bool isProcessing = true;

    [Parameter]
    public string roomId { get; set; } = "";

    public string? peerId { get; set; }

    [Parameter]
    public string peerName { get; set; } = "";

    [Parameter]
    public string peerAvatar { get; set; } = "";

    [Parameter]
    public string typeCall { get; set; } = "";

    public string? remoteId { get; set; }

    [Parameter]
    public string? receiverName { get; set; }

    [Parameter]
    public string? receiverAvt { get; set; }

    public string status { get; set; } = "Đang gọi ...";

    public bool isMicOn = true;

    public bool isVideoOn;

    private int countdownSeconds = 45;

    private Timer? timer;

    private HubConnection? hubCallConnection;
    private HubConnection? hubRoomConnection;

    private Dictionary<string, PeerInfo> peersInRoom = new();

    [JSInvokable]
    public void setIsProcessingToFalse() {
        // Console.WriteLine("setIsProcessingToFalse");
        isProcessing = false;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("thietLapKhiDongCuocGoi");
    }

    private async Task setupCallHub()
    {
        hubCallConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5275/call-hub")
        .Build();

        await hubCallConnection.StartAsync();

        hubCallConnection.On<string>("receiverResponse", response =>
        {
            timer!.Dispose();
            timer = null;

            JSRuntime.InvokeVoidAsync("tatNhacChuong");

            switch (response)
            {
                case "acceptCall":
                    status = "Đã kết nối";
                    break;
                case "rejectCall":
                    status = "Không trả lời";
                    hubRoomConnection!.SendAsync("LeaveRoom", roomId);
                    JSRuntime.InvokeVoidAsync("finishCall");
                    JSRuntime.InvokeVoidAsync("leaveAndRemoveLocalStream");
                    break;

                case "inAnotherCall":
                    status = "đang ở trong cuộc gọi khác";
                    hubRoomConnection!.SendAsync("LeaveRoom", roomId);
                    JSRuntime.InvokeVoidAsync("finishCall");
                    JSRuntime.InvokeVoidAsync("leaveAndRemoveLocalStream");
                    break;
            }

            InvokeAsync(StateHasChanged);

        });

    }

    bool isFirst = true;

    private async Task setupRoomHub()
    {
        hubRoomConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5275/room-hub")
        .Build();

        await hubRoomConnection.StartAsync();

        hubRoomConnection.On<Dictionary<string, PeerInfo>>("ListPeerdInRoom", async (peers) =>
        {
            @* Console.WriteLine("ListPeerdInRoom"); *@
            this.peersInRoom = peers;
            await InvokeAsync(StateHasChanged);
            @* peers.ForEach((p) => Console.WriteLine(p.Name)); *@

            if (isFirst)
            {
                isFirst = false;
                await JSRuntime.InvokeVoidAsync(
                    "joinAndDisplayLocalStream", 
                    hubRoomConnection!.ConnectionId, 
                    typeCall,
                    DotNetObjectReference.Create(this)
                );
            }
        });



        hubRoomConnection.On<string, PeerInfo>("NewPeerJoin", (connectionId, newPeer) =>
        {
            @* Console.WriteLine("Event NewPeerJoin"); *@
            peersInRoom.Add(connectionId, newPeer);
            InvokeAsync(StateHasChanged);
            Snackbar.Add(
            newPeer.Name + " đã tham gia cuộc gọi",
            Severity.Normal,
            config =>
            {
                config.ShowCloseIcon = false;
                config.VisibleStateDuration = 4000;
                config.HideTransitionDuration = 300;
                config.ShowTransitionDuration = 300;
            }
            );
        });

        hubRoomConnection.On<string>("PeerLeave", connectionId =>
        {
            @* Console.WriteLine("Event PeerLeave"); *@
            peersInRoom.Remove(connectionId);
            if (peersInRoom.Count == 0)
            {
                status = "Cuộc gọi đã kết thúc";
                hubRoomConnection!.SendAsync("LeaveRoom", roomId);
                JSRuntime.InvokeVoidAsync("finishCall");
                JSRuntime.InvokeVoidAsync("leaveAndRemoveLocalStream");
            }
            InvokeAsync(StateHasChanged);
        });
    }

    protected override void OnParametersSet()
    {
        string[] substrings = roomId.Split('.');
        peerId = substrings[0];
        remoteId = substrings[1];

        receiverAvt = "https://vignette.wikia.nocookie.net/ponyo/images/5/51/Ponyo.png/revision/latest?cb=20171006002135";

        isMicOn = true;

        if (typeCall == "voice")
        {
            isVideoOn = false;
        }
        else
        {
            isVideoOn = true;
        }

        if (receiverName == null) {
            /* 
            Tức là người tham gia vào cuộc gọi 
            khác với người đi gọi
            */
            status = "Đã kết nối";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await setupRoomHub();
        PeerInfo myClientRoomInfo = new PeerInfo(peerName, peerAvatar);
        await hubRoomConnection!.SendAsync("JoinRoom", myClientRoomInfo, roomId);


        if (receiverName != null)
        {
            await setupCallHub();
            PeerInfo myClientCallInfo = new PeerInfo(peerName, peerAvatar);
            await hubCallConnection!.SendAsync("SendCallTo", remoteId, myClientCallInfo, typeCall, roomId);
            timer = new Timer(Countdown, null, 1000, 1000);
        }
    }

    private void Countdown(object? state)
    {
        countdownSeconds--;

        InvokeAsync(StateHasChanged);

        if (countdownSeconds == 0)
        {
            // Dừng đồng hồ đếm ngược khi countdown kết thúc
            timer!.Dispose();
            timer = null;
            
            status = "Không trả lời";
            InvokeAsync(StateHasChanged);

            hubRoomConnection!.SendAsync("LeaveRoom", roomId);

            handleMissingCall();
            JSRuntime.InvokeVoidAsync("finishCall");

            JSRuntime.InvokeVoidAsync("leaveAndRemoveLocalStream");

        }
    }

    public async void handleMissingCall() {
        // Console.WriteLine("SendMissingCallMessageTo");
        await hubCallConnection!.SendAsync("SendMissingCallMessageTo", remoteId, peerId);
        await JSRuntime.InvokeVoidAsync("tatNhacChuong");
    }

    public async void CallEnd()
    {
        // Console.WriteLine("CallEnd()");
        if (status == "Đang gọi ...") {
            timer!.Dispose();
            timer = null;
            handleMissingCall();
        }

        await JSRuntime.InvokeVoidAsync("window.close");
    }

        public void ToggleMic()
    {
        isMicOn = !isMicOn;
        JSRuntime.InvokeVoidAsync("toggleMic");
    }

    public void ToggleVideo()
    {
        isVideoOn = !isVideoOn;
        JSRuntime.InvokeVoidAsync("toggleVideo");
    }


    public async void Dispose()
    {
        // Rời khỏi phòng nếu chưa rời
        await hubRoomConnection!.SendAsync("LeaveRoom", roomId);

        if (hubCallConnection != null)
        {
            await hubCallConnection.DisposeAsync();
            hubCallConnection = null;
        }

        if (hubRoomConnection != null)
        {
            await hubRoomConnection.DisposeAsync();
            hubRoomConnection = null;
        }
    }

}
