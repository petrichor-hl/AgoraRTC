@page "/"


<PageTitle>Index</PageTitle>

<audio id="audioPlayer" loop>
    <source src="assets/audio/nhac_chuong_do_choi_dien_thoai.mp3" type="audio/mp3" />
</audio>

<div class="d-flex flex-column ma-10">
    <MudImage Src="@("https://image.tmdb.org/t/p/w440_and_h660_face/" + imgAvts[profileIndex])" Height="200" Width="200"
        Class="rounded-lg" ObjectFit="ObjectFit.Cover" />
    <h3 class="mt-4">My name: @names[profileIndex]</h3>
    <h3>My peerID: @(hubConnection == null ? "..." : hubConnection.ConnectionId)</h3>

    <MudTextField Class="my-4" @bind-Value="remoteId" Placeholder="RemoteID" Variant="Variant.Outlined" />

    <div class="d-flex">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Call" DisableElevation="true"
            Color="Color.Primary" OnClick=@(() => CallPeer("voice")) Class="mr-4">
            Voice Call
        </MudButton>

        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Videocam" DisableElevation="true"
            Color="Color.Primary" OnClick=@(() => CallPeer("video"))>
            Video Call
        </MudButton>
    </div>

</div>


@inject IDialogService DialogService

@using Microsoft.AspNetCore.SignalR.Client;
@using AgoraRTC.Components
@using AgoraRTC.Models

@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

@code {

    private string[] names = new string[]
    {
"Trần Lê Hoàng Lâm",
"Lê Bảo Như",
"Bùi Cường",
"Huỳnh Ngọc Ý Nhi",
"Totoro",
"Mononokai",
"Slime",
    };

    private string[] imgAvts = new string[]
    {
"reEMJA1uzscCbkpeRJeTT2bjqUp.jpg",
"kTs2WNZOukpWdNhoRlH94pSJ3xf.jpg",
"dvXJgEDQXhL9Ouot2WkBHpQiHGd.jpg",
"vc2TMwHqdjkqwRNkmAo2Ags1f29.jpg",
"1h4OqxXYRRM2FA3Nu6GBgD3puJj.jpg",
"39wmItIWsg5sZMyRUHLkWBcuVCM.jpg",
"lOa1IUp3AFVo6h9b17KA20r4E5s.jpg",
    };

    private string remoteId = "";

    private int profileIndex;

    private bool isIdle = true;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5275/call-hub")
        .Build();

        await hubConnection.StartAsync();

        hubConnection.On<string, PeerInfo, string, string>("inviteCall", (callerId, callerInfo, typeCall, roomId) =>
        {
            @* Console.WriteLine("Nhận cuộc gọi từ " + callerInfo.Name); *@
            if (isIdle)
            {
                isIdle = false;
                InvokeAsync(() => OpenNotificationDialog(callerId, callerInfo, typeCall, roomId));
            }
            else
            {
                // Người nhận đang ở trong cuộc gọi khác
                hubConnection!.SendAsync("SendResponseCallTo", callerId, "inAnotherCall");
            }

        });

        hubConnection.On<string>("missingCall", callerId => {
            // Console.WriteLine("Đã bỏ lỡ cuộc gọi từ " + callerId);
        });

    }

    protected override void OnParametersSet()
    {
        Random random = new Random();
        profileIndex = random.Next(0, 7);
    }

    private async Task CallPeer(string typeCall)
    {
        var roomId = hubConnection!.ConnectionId + remoteId;

        isIdle = false;

        await JSRuntime.InvokeVoidAsync(
        "moCuaSoGoiDien",
        hubConnection!.ConnectionId,
        names[profileIndex],
        imgAvts[profileIndex],
        remoteId,
        "Tăng Thị Kim Nguyên",
        typeCall,
        DotNetObjectReference.Create(this)
        );

        await JSRuntime.InvokeVoidAsync("phatNhacChuong");
    }


    public async void OpenNotificationDialog(string callerId, PeerInfo callerInfo, string typeCall, string roomId)
    {
        DialogOptions options = new DialogOptions
            {
                FullWidth = false,
                MaxWidth = MaxWidth.ExtraSmall,
                CloseOnEscapeKey = false,
                DisableBackdropClick = true,
                NoHeader = true,
            };

        DialogParameters keyValues = new DialogParameters();
        keyValues.Add("callerName", callerInfo.Name);
        keyValues.Add("callerAvt", callerInfo.AvatarUrl);
        keyValues.Add("typeCall", typeCall);

        var dialogResult = DialogService.Show<CallDialog>("", keyValues, options);
        var result = await dialogResult.Result;

        if (result.Canceled)
        {
            // Từ chối cuộc gọi
            await hubConnection!.SendAsync("SendResponseCallTo", callerId, "rejectCall");
            isIdle = true;
        }
        else
        {
            // Chấp nhận cuộc gọi
            // Console.WriteLine("Accept Call");
            await hubConnection!.SendAsync("SendResponseCallTo", callerId, "acceptCall");

            await JSRuntime.InvokeVoidAsync(
            "joinRoomGoiDien",
            roomId,
            names[profileIndex],
            imgAvts[profileIndex],
            typeCall,
            DotNetObjectReference.Create(this)
            );

        }

    }

    [JSInvokable]
    public void setIdleToTrue()
    {
        // Console.WriteLine("setIdleToTrue");
        isIdle = true;
    }

}
